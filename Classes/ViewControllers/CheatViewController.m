////  CheatViewController.m////  Created by Fred Sharples on 7/24/09.//  Copyright 2009 __MyCompanyName__. All rights reserved.//#import "CheatViewController.h"@implementation CheatViewController/* // The designated initializer.  Override if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad.- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {    if (self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]) {        // Custom initialization    }    return self;}*/// Implement loadView to create a view hierarchy programmatically, without using a nib.- (void)loadView {	[self initializeView];	self.view.backgroundColor = [UIColor blackColor];		_textField = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 320, 20)];	_textField.backgroundColor = [UIColor clearColor];	_textField.textColor = [UIColor whiteColor];	_textField.textAlignment = NSTextAlignmentCenter;	_textField.text = @"BUILD 05";	[self.view addSubview:_textField];		UIButton *btn0 = [UIButton buttonWithType:UIButtonTypeCustom];	btn0.backgroundColor = [UIColor whiteColor];	btn0.frame = CGRectMake(10, 50, 300, 40);	[btn0 setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];	[btn0 setTitle:@"UNLOCK ALL LEVELS" forState:UIControlStateNormal];	[btn0 addTarget:self action:@selector(enableAllLevels) forControlEvents:UIControlEventTouchUpInside];	[self.view addSubview:btn0];		UIButton *btn1 = [UIButton buttonWithType:UIButtonTypeCustom];	btn1.backgroundColor = [UIColor whiteColor];	btn1.frame = CGRectMake(10, 150, 300, 40);	[btn1 setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];	[btn1 setTitle:@"WIN ALL FLOWERS BUT LEVEL 1" forState:UIControlStateNormal];	[btn1 addTarget:self action:@selector(winFlowers) forControlEvents:UIControlEventTouchUpInside];	[self.view addSubview:btn1];		UIButton *btnGo = [UIButton buttonWithType:UIButtonTypeCustom];	btnGo.backgroundColor = [UIColor whiteColor];	btnGo.frame = CGRectMake(10, 250, 300, 40);	[btnGo setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];	[btnGo setTitle:@"GO" forState:UIControlStateNormal];	[btnGo addTarget:self action:@selector(fadeView) forControlEvents:UIControlEventTouchUpInside];	[self.view addSubview:btnGo];			[self initializeViewAnimation];}/*// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.- (void)viewDidLoad {    [super viewDidLoad];}*//*// Override to allow orientations other than the default portrait orientation.- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {    // Return YES for supported orientations    return (interfaceOrientation == UIInterfaceOrientationLandscapeRight);}*/- (void)didReceiveMemoryWarning {	// Releases the view if it doesn't have a superview.    [super didReceiveMemoryWarning];		// Release any cached data, images, etc that aren't in use.}- (void)viewDidUnload {	// Release any retained subviews of the main view.	// e.g. self.myOutlet = nil;}- (void)dealloc {	[_textField removeFromSuperview];		    }- (void) removeView {	[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_CHANGESTATE object:self userInfo:@{kNOTIFICATION_CHANGESTATE: @(kGameState_MainMenu)}];}- (void) enableAllLevels {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];	profileManager._nextLevelNum = [profileManager._levels count];}- (void) winFlowers {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		unsigned i;	NSMutableArray *levels = [[NSMutableArray alloc] initWithArray:profileManager._levels];		for (i = 0; i < [levels count]; i++) {		NSMutableDictionary *levelData = levels[i];		if (i == 0) {			levelData[kGameDataMovesKey] = @0;			[levelData setValue:@NO forKey:kGameDataFlowerKey];		} else {			levelData[kGameDataMovesKey] = @1;			[levelData setValue:@YES forKey:kGameDataFlowerKey];		}	}		[profileManager updateLevels:levels];	[profileManager saveLevels];		}@end