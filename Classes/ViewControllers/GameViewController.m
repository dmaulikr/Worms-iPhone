////  GameViewController.m//  LateWorm////  Created by Susan Surapruik on 12/10/09.//  Copyright 2009 __MyCompanyName__. All rights reserved.//#import "GameViewController.h"#import "LateWormAppDelegate.h"#import "HoleObject.h"#import "GameObject.h"#import "LevelIntroView.h"#import "LevelFlowerView.h"#import "LevelCompleteView.h"#import "OpenALPlayer.h"@implementation GameViewController@synthesize _delegate;static unsigned startHoleX = 40;static unsigned startHoleY = 110;/* // The designated initializer.  Override if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad.- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {    if (self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]) {        // Custom initialization    }    return self;}*/// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.- (void)viewDidLoad {    [super viewDidLoad];		self.view.userInteractionEnabled = NO;		ProfileManager *profileManager = [ProfileManager sharedProfileManager];		UIImage *holeImage = [UIImage imageNamed:kHoleImage];	_holeWidth = holeImage.size.width;	_holeHeight = holeImage.size.height;	_holeHeightDiff = kGameObjectHeight - _holeHeight;		_roundTitle.font = [UIFont fontWithName:@"Omnes-Bold" size:14.0];	_roundLabel.font = [UIFont fontWithName:@"HelveticaNeueLTStd-Hv" size:30.0];	_movesTitle.font = [UIFont fontWithName:@"Omnes-Bold" size:14.0];	_movesLabel.font = [UIFont fontWithName:@"HelveticaNeueLTStd-Hv" size:30.0];		if (profileManager._savedLevel) {		_moves = profileManager._savedMoves;		_roundLabel.text = [NSString stringWithFormat:@"%d", profileManager._levelNum+1];		_movesLabel.text = [NSString stringWithFormat:@"%d", _moves];		[self initializeObjects];	} else {		_introLevelView.alpha = 1.0;		[self popupLevelInfo];	}		[self initializeViewAnimation];}- (void)didReceiveMemoryWarning {	// Releases the view if it doesn't have a superview.    [super didReceiveMemoryWarning];		// Release any cached data, images, etc that aren't in use.}- (void)viewDidUnload {	// Release any retained subviews of the main view.	// e.g. self.myOutlet = nil;}#pragma mark -#pragma mark Memory Release- (void)dealloc {	[self invalidateTimer];		_delegate = nil;		[self removeHoles];			[self removeObjects];	   }#pragma mark -#pragma mark Fade Methods- (void) popupLevelInfo {	self.view.userInteractionEnabled = NO;		ProfileManager *profileManager = [ProfileManager sharedProfileManager];		NSDictionary *levelData = [profileManager getCurrentLevelData];	unsigned leastMoves = 0;		[self createInitialHoles];		BOOL flowerGained = [levelData[kGameDataFlowerKey] boolValue];		if (!flowerGained) {		leastMoves = [levelData[kGameDataLeastMovesKey] unsignedIntValue];	}		[_introLevelView setLevelNumberImages:profileManager._levelNum+1];	_introLevelView._levelFlower._showFlower = flowerGained;	_introLevelView._levelFlower._showMoves = YES;	_introLevelView._levelFlower._firstTime = !flowerGained;	[_introLevelView._levelFlower setLevel:profileManager._levelNum withMoves:leastMoves];	[_introLevelView setMovesText:leastMoves];		[self.view addSubview:_introLevelView];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(viewVisible)];	_introLevelView.alpha = 1.0;	[UIView commitAnimations];}- (void) popupLevelComplete:(BOOL)levelAlreadyCompleted {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		self.view.userInteractionEnabled = NO;		NSDictionary *levelData = [profileManager getCurrentLevelData];	unsigned leastMoves = [levelData[kGameDataLeastMovesKey] unsignedIntValue];	[_levelCompleteView setLevel:profileManager._levelNum withMoves:_moves withLeastMoves:leastMoves forTotalLevels:[profileManager._levels count] levelAlreadyCompleted:levelAlreadyCompleted];		[self.view addSubview:_levelCompleteView];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(viewVisible)];	_levelCompleteView.alpha = 1.0;	[UIView commitAnimations];}- (void) initializeViewAnimation {	[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(viewVisible)];	self.view.alpha = 1.0;	[UIView commitAnimations];}- (void) viewVisible {	self.view.userInteractionEnabled = YES;}- (void) fadeView {	self.view.userInteractionEnabled = NO;		ProfileManager *profileManager = [ProfileManager sharedProfileManager];	profileManager._gameInProgress = NO;		if (!_viewGarden) {		[_delegate fadeBackgroundIn:NO];	}		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(removeView)];	self.view.alpha = 0.0;	[UIView commitAnimations];}- (void) removeView {	if (_viewGarden) {		[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_CHANGESTATE object:self userInfo:@{kNOTIFICATION_CHANGESTATE: @(kGameState_Garden)}];	} else {		[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_CHANGESTATE object:self userInfo:@{kNOTIFICATION_CHANGESTATE: @(kGameState_MainMenu)}];	}}- (void) removeResetLevel:(BOOL)resetLevel {	self.view.userInteractionEnabled = NO;		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	if (resetLevel) {		[UIView setAnimationDidStopSelector:@selector(removeResetLevelViewReset)];	} else {		[UIView setAnimationDidStopSelector:@selector(removeResetLevelView)];	}	_resetLevelView.alpha = 0.0;	[UIView commitAnimations];}- (void) removeIntroLevelView {	[_introLevelView removeFromSuperview];	self.view.userInteractionEnabled = YES;	[self resetLevel];}- (void) removeResetLevelViewReset {	[self resetLevel];	[self removeResetLevelView];}- (void) removeResetLevelView {	[_resetLevelView removeFromSuperview];	self.view.userInteractionEnabled = YES;}- (void) removeExitLevelView {	[_exitLevelView removeFromSuperview];	self.view.userInteractionEnabled = YES;}- (void) removeLevelCompleteViewReset {	[_levelCompleteView removeFromSuperview];	self.view.userInteractionEnabled = YES;	[self resetLevel];}- (void) removeLevelCompleteView {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		unsigned newLevel = profileManager._levelNum + 1;		[_levelCompleteView removeFromSuperview];		if (newLevel < [profileManager._levels count]) {		profileManager._levelNum = newLevel;		[self popupLevelInfo];	} else {		// This should never happen but put it in anyways		[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_CHANGESTATE object:self userInfo:@{kNOTIFICATION_CHANGESTATE: @(kGameState_MainMenu)}];	}}#pragma mark -#pragma mark Game Methods- (void) resetLevel {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		_moves = 0;	_roundLabel.text = [NSString stringWithFormat:@"%d", profileManager._levelNum+1];	_movesLabel.text = [NSString stringWithFormat:@"%d", _moves];	[self initializeObjects];}- (void) createHoleAtRow:(unsigned)row andColumn:(unsigned)column {	NSInteger tag = (row + 1) * kMaxColumns + column;	HoleObject *hole = [[HoleObject alloc] initWithFrame:CGRectMake(startHoleX + (kGameHoleDiff * column) - (_holeWidth/2), startHoleY + (kGameHoleDiff * row) - (_holeHeight/2) - _holeHeightDiff, _holeWidth, _holeHeight + _holeHeightDiff)];	hole._row = row;	hole._column = column;	hole.tag = tag;	[hole addTarget:self action:@selector(selectObject:) forControlEvents:UIControlEventTouchUpInside];	[_holesView addSubview:hole];	}- (void) createInitialHoles {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		unsigned row, column;	NSString *objectType;		NSDictionary *levelData = [profileManager getCurrentLevelData];	NSArray *layout = levelData[kGameDataLayoutKey];		[self removeHoles];		NSArray *rowObjects;	for (row = 0; row < [layout count]; row++) {		rowObjects = layout[row];				for (column = 0; column < [rowObjects count]; column++) {			objectType = rowObjects[column];			if (![objectType isEqualToString:kGameEmpty]) {				[self createHoleAtRow:row andColumn:column];			}		}	}}- (void) initializeObjects {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		unsigned row, column;	NSString *objectType;	NSDictionary *levelData;	NSArray *layout;		profileManager._gameInProgress = profileManager._savedLevel;		if (profileManager._savedLevel) {		layout = profileManager._savedLayout;	} else {		levelData = [profileManager getCurrentLevelData];		layout = levelData[kGameDataLayoutKey];		NSMutableArray *savedLayout = [[NSMutableArray alloc] init];		[savedLayout addObjectsFromArray:layout];		[profileManager updateSavedLayout:savedLayout];			}		_numWorms = 0;		[self removeHoles];		[self removeObjects];		NSMutableArray *rowObjects;	for (row = 0; row < [layout count]; row++) {		rowObjects = layout[row];				for (column = 0; column < [rowObjects count]; column++) {			objectType = rowObjects[column];						if (![objectType isEqualToString:kGameEmpty]) {				[self createHoleAtRow:row andColumn:column];								if ([objectType isEqualToString:kGameWorm]) {					[self createObject:objectType atRow:row andColumn:column];				}			}		}	}		profileManager._savedLevel = NO;		[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioWormAppear, kNOTIFICATION_RESTART: @YES}];}- (void) createObject:(NSString*)type atRow:(unsigned)row andColumn:(unsigned)column {	_numWorms = _numWorms + 1;	NSInteger tag = (row + 1) * kMaxColumns + column;	GameObject *object = [[GameObject alloc] initWithFrame:CGRectMake(0,0,kGameObjectWidth,kGameObjectHeight)];	[object setType:type];	object._row = row;	object._column = column;	object.tag = tag;	object.delegate = self;	object.center = CGPointMake(startHoleX + kGmeWormOffsetFromHoleX + (kGameHoleDiff * column), startHoleY + kGmeWormOffsetFromHoleY + (kGameHoleDiff * row));	[_objectsView addSubview:object];	}	- (void) removeHoles {	unsigned i;	NSArray *holes = [_holesView subviews];	for (i = 0; i < [holes count]; i++) {		[holes[i] removeFromSuperview];	}}- (void) removeObjects {	unsigned i;	NSArray *objects = [_objectsView subviews];	for (i = 0; i < [objects count]; i++) {		[objects[i] removeFromSuperview];	}}- (void) selectObject:(id)sender {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		unsigned row, column;		HoleObject *obj = sender;		if (obj._enabled) {		[self increaseMoves];				row = obj._row;		column = obj._column;				[self flipObjectAtRow:row andColumn:column];		if (row > 0) {			[self flipObjectAtRow:row-1 andColumn:column];		}		if (row + 1 < kMaxRows) {			[self flipObjectAtRow:row+1 andColumn:column];		}		if (column > 0) {			[self flipObjectAtRow:row andColumn:column-1];		}		if (column + 1 < kMaxColumns) {			[self flipObjectAtRow:row andColumn:column+1];		}				if (_numWorms == 0) {			profileManager._gameInProgress = NO;			self.view.userInteractionEnabled = NO;			[self performSelector:@selector(queuedSaveLevelCompletion) withObject:nil afterDelay:1.0];		} else {			profileManager._gameInProgress = YES;		}	}}- (void) flipObjectAtRow:(unsigned)row andColumn:(unsigned)column {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		GameObject *gameObject;	NSInteger tag = (row + 1) * kMaxColumns + column;	HoleObject *hole = (HoleObject*)[_holesView viewWithTag:tag];		NSString *objectType = (profileManager._savedLayout)[row][column];	if ([objectType isEqualToString:kGameWorm]) {		gameObject = (GameObject*)[_objectsView viewWithTag:tag];		if (gameObject && [[gameObject getType] isEqualToString:kGameWorm]) {			hole._enabled = NO;			[self makeWormDisappear:gameObject];			[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioWormDisppear, kNOTIFICATION_RESTART: @YES}];						[self updateSavedDelegateLayoutAtRow:row andColumn:column toType:kGameHole];		}	} else if ([_holesView viewWithTag:tag]) {		hole._enabled = NO;		[self createObject:kGameWorm atRow:row andColumn:column];		[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioWormAppear, kNOTIFICATION_RESTART: @YES}];				[self updateSavedDelegateLayoutAtRow:row andColumn:column toType:kGameWorm];	}}- (void) makeWormDisappear:(GameObject*)obj {	_numWorms = _numWorms - 1;	[obj changeState:kObjectState_Disppear];}- (void) increaseMoves {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		_moves++;	_movesLabel.text = [NSString stringWithFormat:@"%d", _moves];		profileManager._savedMoves = _moves;}- (void) queuedSaveLevelCompletion {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		[self saveLevelCompletion];	profileManager._gameInProgress = NO;	[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioWinLevel, kNOTIFICATION_RESTART: @YES}];	self.view.userInteractionEnabled = YES;}- (void) saveLevelCompletion {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		NSMutableDictionary *levelData = [[NSMutableDictionary alloc] initWithDictionary:[profileManager getCurrentLevelData]];	unsigned leastMoves = [levelData[kGameDataLeastMovesKey] unsignedIntValue];	BOOL flowerEarned = NO;	BOOL levelAlreadyCompleted = NO;		levelAlreadyCompleted = [levelData[kGameDataFlowerKey] boolValue];	if (_moves <= leastMoves) {		flowerEarned = !levelAlreadyCompleted;		levelData[kGameDataMovesKey] = [NSNumber numberWithInteger:_moves];		[levelData setValue:@YES forKey:kGameDataFlowerKey];		[profileManager setLevelDataForLevel:profileManager._levelNum levelData:levelData];		[profileManager saveLevels];	}		if (profileManager._levelNum + 1 == profileManager._nextLevelNum) {		unsigned newLevel = profileManager._nextLevelNum + 1;		if (newLevel < [profileManager._levels count]) {			profileManager._nextLevelNum = newLevel;		}	}		BOOL gameComplete = flowerEarned;	unsigned i;	NSDictionary *levelData2;	for (i = 0; i < [profileManager._levels count]; i++) {		levelData2 = [profileManager getLevelDataForLevel:i];		if (![levelData2[kGameDataFlowerKey] boolValue]) {			gameComplete = NO;		}	}		if (gameComplete) {		_gameCompleteView.alpha = 0.0;		_gameCompleteViewLabel.font = [UIFont fontWithName:@"HelveticaNeueLTStd-Bd" size:18.0];		[self.view addSubview:_gameCompleteView];		[UIView beginAnimations:nil context:nil];		[UIView setAnimationDuration:kViewFadeTime];		[UIView setAnimationDelegate:self];		[UIView setAnimationDidStopSelector:@selector(viewVisible)];		_gameCompleteView.alpha = 1.0;		[UIView commitAnimations];	} else {		[self popupLevelComplete:levelAlreadyCompleted];	}		}- (void) updateSavedDelegateLayoutAtRow:(unsigned)row andColumn:(unsigned)column toType:(NSString*)type {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		NSMutableArray *savedLayout = [[NSMutableArray alloc] initWithArray:profileManager._savedLayout];	NSMutableArray *rowLayout = [[NSMutableArray alloc] initWithArray:savedLayout[row]];	rowLayout[column] = type;	savedLayout[row] = rowLayout;	[profileManager updateSavedLayout:savedLayout];		}- (void) invalidateTimer {	if (_timer) {		[_timer invalidate];		_timer = nil;	}}#pragma mark -#pragma mark Button Methods- (IBAction) startLevelSelected {	self.view.userInteractionEnabled = NO;		[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioClick, kNOTIFICATION_RESTART: @YES}];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(removeIntroLevelView)];	_introLevelView.alpha = 0.0;	[UIView commitAnimations];}- (IBAction) popupResetLevel {	self.view.userInteractionEnabled = NO;		[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioClick, kNOTIFICATION_RESTART: @YES}];		[self.view addSubview:_resetLevelView];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(viewVisible)];	_resetLevelView.alpha = 1.0;	[UIView commitAnimations];}- (IBAction) resetLevelSelected {	[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioClick, kNOTIFICATION_RESTART: @YES}];		[self removeResetLevel:YES];}- (IBAction) resetLevelDenied {	[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioClick, kNOTIFICATION_RESTART: @YES}];		[self removeResetLevel:NO];}- (void) popupExitLevel {	self.view.userInteractionEnabled = NO;		[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioClick, kNOTIFICATION_RESTART: @YES}];		[self.view addSubview:_exitLevelView];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(viewVisible)];	_exitLevelView.alpha = 1.0;	[UIView commitAnimations];}- (IBAction) exitLevelSelected {	self.view.userInteractionEnabled = NO;		[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioClick, kNOTIFICATION_RESTART: @YES}];		[self fadeView];}- (IBAction) exitLevelDenied {	self.view.userInteractionEnabled = NO;		[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioClick, kNOTIFICATION_RESTART: @YES}];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(removeExitLevelView)];	_exitLevelView.alpha = 0.0;	[UIView commitAnimations];}- (IBAction) tryAgainSelected {	self.view.userInteractionEnabled = NO;		[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioClick, kNOTIFICATION_RESTART: @YES}];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(removeLevelCompleteViewReset)];	_levelCompleteView.alpha = 0.0;	[UIView commitAnimations];}- (IBAction) nextLevelSelected {	self.view.userInteractionEnabled = NO;		[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioClick, kNOTIFICATION_RESTART: @YES}];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(removeLevelCompleteView)];	_levelCompleteView.alpha = 0.0;	[UIView commitAnimations];}- (IBAction) viewGarden {	[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_PLAYSOUND object:self userInfo:@{kNOTIFICATION_PLAYSOUND: kAudioClick, kNOTIFICATION_RESTART: @YES}];		_viewGarden = YES;	[self fadeView];}#pragma mark -#pragma mark GameObjectDelegate- (void) enableHole:(GameObject*)gameObject row:(unsigned)row column:(unsigned)column {	NSInteger tag = (row + 1) * kMaxColumns + column;	HoleObject *hole = (HoleObject*)[_holesView viewWithTag:tag];	hole._enabled = YES;}- (void) removeObject:(GameObject*)gameObject row:(unsigned)row column:(unsigned)column {	NSInteger tag = (row + 1) * kMaxColumns + column;	GameObject *removeGameObject = (GameObject*)[_objectsView viewWithTag:tag];	if ([[removeGameObject getType] isEqualToString:kGameWorm]) {		[removeGameObject removeFromSuperview];	}}@end