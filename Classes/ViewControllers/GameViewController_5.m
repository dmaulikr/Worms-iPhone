////  GameViewController.m//  LateWorm////  Created by Susan Surapruik on 12/10/09.//  Copyright 2009 __MyCompanyName__. All rights reserved.//#import "GameViewController.h"#import "LateWormAppDelegate.h"#import "HoleObject.h"#import "GameObject.h"#import "LevelIntroView.h"#import "LevelFlowerView.h"#import "LevelCompleteView.h"@implementation GameViewController@synthesize _delegate;static unsigned startHoleX = 40;static unsigned startHoleY = 110;static unsigned diffHole = 60;static float wormOffsetX = 3.5;static float wormOffsetY = -22.5;/* // The designated initializer.  Override if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad.- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {    if (self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]) {        // Custom initialization    }    return self;}*/// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.- (void)viewDidLoad {    [super viewDidLoad];		self.view.userInteractionEnabled = NO;		UIImage *holeImage = [UIImage imageNamed:kHoleImage];	_holeWidth = holeImage.size.width;	_holeHeight = holeImage.size.height;	_holeHeightDiff = kGameObjectHeight - _holeHeight;		[self createInitialHoles];		_introLevelView.alpha = 1.0;	[self popupLevelInto];		[self initializeViewAnimation];}- (void)didReceiveMemoryWarning {	// Releases the view if it doesn't have a superview.    [super didReceiveMemoryWarning];		// Release any cached data, images, etc that aren't in use.}- (void)viewDidUnload {	// Release any retained subviews of the main view.	// e.g. self.myOutlet = nil;}#pragma mark -#pragma mark Memory Release- (void)dealloc {	[self invalidateTimer];		[_delegate release];		[self removeHoles];	[_holesView release];		[self removeObjects];	[_objectsView release];		[_roundLabel release];	[_movesLabel release];		[_introLevelView release];	[_levelCompleteView release];		[_resetLevelView release];	[_exitLevelView release];	    [super dealloc];}#pragma mark -#pragma mark Fade Methods- (void) popupLevelInto {	NSMutableDictionary *levelData = [_delegate._levels objectAtIndex:_delegate._levelNum];	unsigned leastMoves = [[levelData objectForKey:kGameDataLeastMovesKey] unsignedIntValue];		_introLevelView._levelFlower._showFlower = NO;	_introLevelView._levelFlower._showMoves = YES;	[_introLevelView._levelFlower setLevel:_delegate._levelNum withMoves:leastMoves];	[_introLevelView setMovesText:leastMoves];		[self.view addSubview:_introLevelView];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(viewVisible)];	_introLevelView.alpha = 1.0;	[UIView commitAnimations];}- (void) popupLevelComplete {	NSMutableDictionary *levelData = [_delegate._levels objectAtIndex:_delegate._levelNum];	unsigned leastMoves = [[levelData objectForKey:kGameDataLeastMovesKey] unsignedIntValue];	[_levelCompleteView setLevel:_delegate._levelNum withMoves:_moves withLeastMoves:leastMoves forTotalLevels:[_delegate._levels count]];		[self.view addSubview:_levelCompleteView];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(viewVisible)];	_levelCompleteView.alpha = 1.0;	[UIView commitAnimations];}- (void) initializeViewAnimation {	[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(viewVisible)];	self.view.alpha = 1.0;	[UIView commitAnimations];}- (void) viewVisible {	self.view.userInteractionEnabled = YES;}- (void) fadeView {	self.view.userInteractionEnabled = NO;		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(removeView)];	self.view.alpha = 0.0;	[UIView commitAnimations];}- (void) removeView {	[_delegate changeState:kGameState_MainMenu];}- (void) removeResetLevel:(BOOL)resetLevel {	self.view.userInteractionEnabled = NO;		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	if (resetLevel) {		[UIView setAnimationDidStopSelector:@selector(removeResetLevelViewReset)];	} else {		[UIView setAnimationDidStopSelector:@selector(removeResetLevelView)];	}	_resetLevelView.alpha = 0.0;	[UIView commitAnimations];}- (void) removeIntroLevelView {	[_introLevelView removeFromSuperview];	self.view.userInteractionEnabled = YES;	[self resetLevel];}- (void) removeResetLevelViewReset {	[self resetLevel];	[self removeResetLevelView];}- (void) removeResetLevelView {	[_resetLevelView removeFromSuperview];	self.view.userInteractionEnabled = YES;}- (void) removeExitLevelView {	[_exitLevelView removeFromSuperview];	self.view.userInteractionEnabled = YES;}- (void) removeLevelCompleteViewReset {	[_levelCompleteView removeFromSuperview];	self.view.userInteractionEnabled = YES;	[self resetLevel];}- (void) removeLevelCompleteView {	unsigned newLevel = _delegate._levelNum + 1;		[_levelCompleteView removeFromSuperview];	self.view.userInteractionEnabled = YES;		if (newLevel < [_delegate._levels count]) {		_delegate._levelNum = newLevel;		[self resetLevel];	} else {		// This should never happen but put it in anyways		[_delegate changeState:kGameState_MainMenu];	}}#pragma mark -#pragma mark Game Methods- (void) resetLevel {	_moves = 0;	_roundLabel.text = [NSString stringWithFormat:@"%d", _delegate._levelNum+1];	_movesLabel.text = [NSString stringWithFormat:@"%d", _moves];	[self initializeObjects];}- (void) createHoleAtRow:(unsigned)row andColumn:(unsigned)column {	NSInteger tag = row * kMaxColumns + column;	//HoleObject *hole = [[HoleObject alloc] initWithFrame:CGRectMake(startHoleX + (diffHole * column) - (_holeWidth/2), startHoleY + (diffHole * row) - (_holeHeight/2) - _holeHeightDiff, _holeWidth, _holeHeight)];	HoleObject *hole = [[HoleObject alloc] initWithFrame:CGRectMake(startHoleX + (diffHole * column) - (_holeWidth/2), startHoleY + (diffHole * row) - (_holeHeight/2), _holeWidth, _holeHeight)];	hole._row = row;	hole._column = column;	hole.tag = tag;	[hole addTarget:self action:@selector(selectObject:) forControlEvents:UIControlEventTouchUpInside];	[_holesView addSubview:hole];}- (void) createInitialHoles {	unsigned row, column;	NSString *objectType;		NSMutableDictionary *levelData = [_delegate._levels objectAtIndex:_delegate._levelNum];	NSMutableArray *layout = [levelData objectForKey:kGameDataLayoutKey];		for (row = 0; row < [layout count]; row++) {		NSMutableArray *rowObjects = [layout objectAtIndex:row];				for (column = 0; column < [rowObjects count]; column++) {			objectType = [rowObjects objectAtIndex:column];			if (![objectType isEqualToString:kGameEmpty]) {				[self createHoleAtRow:row andColumn:column];			}		}	}}- (void) initializeObjects {	unsigned row, column;	NSString *objectType;		NSMutableDictionary *levelData = [_delegate._levels objectAtIndex:_delegate._levelNum];	NSMutableArray *layout = [levelData objectForKey:kGameDataLayoutKey];		_numWorms = 0;		[self removeHoles];		[self removeObjects];		for (row = 0; row < [layout count]; row++) {		NSMutableArray *rowObjects = [layout objectAtIndex:row];				for (column = 0; column < [rowObjects count]; column++) {			objectType = [rowObjects objectAtIndex:column];			if (![objectType isEqualToString:kGameEmpty]) {				[self createHoleAtRow:row andColumn:column];								if ([objectType isEqualToString:kGameWorm]) {					[self createObject:objectType atRow:row andColumn:column];				}			}		}	}}- (void) createObject:(NSString*)type atRow:(unsigned)row andColumn:(unsigned)column {	NSInteger tag = row * kMaxColumns + column;	GameObject *object = [[GameObject alloc] initWithFrame:CGRectMake(0,0,kGameObjectHeight,64)];	object._type = type;	object._row = row;	object._column = column;	object.tag = tag;	object._delegate = self;	object.center = CGPointMake(startHoleX + wormOffsetX + (diffHole * column), startHoleY + wormOffsetY + (diffHole * row));	[_objectsView addSubview:object];	_numWorms++;}	- (void) removeHoles {	unsigned i;	NSArray *holes = [_holesView subviews];	for (i = 0; i < [holes count]; i++) {		[[holes objectAtIndex:i] removeFromSuperview];		[[holes objectAtIndex:i] release];	}}- (void) removeObjects {	unsigned i;	NSArray *objects = [_objectsView subviews];	for (i = 0; i < [objects count]; i++) {		[[objects objectAtIndex:i] removeFromSuperview];		[[objects objectAtIndex:i] release];	}}- (void) removeObjectAtRow:(unsigned)row andColumn:(unsigned)column {	NSInteger tag = row * kMaxColumns + column;	GameObject *gameObject = (GameObject*)[_objectsView viewWithTag:tag];	if ([gameObject._type isEqualToString:kGameWorm]) {		[gameObject removeFromSuperview];		[gameObject release];	}}- (void) selectObject:(id)sender {	unsigned row, column;		[self increaseMoves];		HoleObject *obj = sender;		row = obj._row;	column = obj._column;		//[self makeWormDisappear:obj];	[self flipObjectAtRow:row andColumn:column];	if (row > 0) {		[self flipObjectAtRow:row-1 andColumn:column];	}	if (row + 1 < kMaxRows) {		[self flipObjectAtRow:row+1 andColumn:column];	}	if (column > 0) {		[self flipObjectAtRow:row andColumn:column-1];	}	if (column + 1 < kMaxColumns) {		[self flipObjectAtRow:row andColumn:column+1];	}		if (_numWorms == 0) {		[self saveLevelCompletion];	}}- (void) flipObjectAtRow:(unsigned)row andColumn:(unsigned)column {	NSInteger tag = row * kMaxColumns + column;	GameObject *gameObject = (GameObject*)[_objectsView viewWithTag:tag];	if ([gameObject._type isEqualToString:kGameWorm]) {		[self makeWormDisappear:gameObject];	} else if ([_holesView viewWithTag:tag]) {		[self createObject:kGameWorm atRow:row andColumn:column];	}}- (void) makeWormDisappear:(GameObject*)obj {	[obj changeState:kObjectState_Disppear];	_numWorms--;}- (void) increaseMoves {	_moves++;	_movesLabel.text = [NSString stringWithFormat:@"%d", _moves];}- (void) saveLevelCompletion {	NSMutableDictionary *levelData = [_delegate._levels objectAtIndex:_delegate._levelNum];	unsigned leastMoves = [[levelData objectForKey:kGameDataLeastMovesKey] unsignedIntValue];		[levelData setObject:[NSNumber numberWithInteger:_moves] forKey:kGameDataMovesKey];	if (_moves <= leastMoves) {		[levelData setValue:[NSNumber numberWithBool:YES] forKey:kGameDataFlowerKey];	}		if (_delegate._levelNum + 1 == _delegate._nextLevelNum) {		unsigned newLevel = _delegate._nextLevelNum + 1;		if (newLevel < [_delegate._levels count]) {			_delegate._nextLevelNum = newLevel;		}	}		[self popupLevelComplete];}- (void) invalidateTimer {	if (_timer) {		[_timer invalidate];		_timer = nil;	}}#pragma mark -#pragma mark Button Methods- (IBAction) startLevelSelected {	self.view.userInteractionEnabled = NO;		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(removeIntroLevelView)];	_introLevelView.alpha = 0.0;	[UIView commitAnimations];}- (IBAction) popupResetLevel {	self.view.userInteractionEnabled = NO;	[self.view addSubview:_resetLevelView];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(viewVisible)];	_resetLevelView.alpha = 1.0;	[UIView commitAnimations];}- (IBAction) resetLevelSelected {	[self removeResetLevel:YES];}- (IBAction) resetLevelDenied {	[self removeResetLevel:NO];}- (void) popupExitLevel {	self.view.userInteractionEnabled = NO;	[self.view addSubview:_exitLevelView];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(viewVisible)];	_exitLevelView.alpha = 1.0;	[UIView commitAnimations];}- (IBAction) exitLevelSelected {	self.view.userInteractionEnabled = NO;		[self fadeView];}- (IBAction) exitLevelDenied {	self.view.userInteractionEnabled = NO;		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(removeExitLevelView)];	_exitLevelView.alpha = 0.0;	[UIView commitAnimations];}- (IBAction) tryAgainSelected {	self.view.userInteractionEnabled = NO;		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(removeLevelCompleteViewReset)];	_levelCompleteView.alpha = 0.0;	[UIView commitAnimations];}- (IBAction) nextLevelSelected {	self.view.userInteractionEnabled = NO;		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(removeLevelCompleteView)];	_levelCompleteView.alpha = 0.0;	[UIView commitAnimations];}@end