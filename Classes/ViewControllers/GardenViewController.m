////  GardenViewController.m//  LateWorm////  Created by Fred Sharples on 12/16/09.//  Copyright 2009 __MyCompanyName__. All rights reserved.//#import "GardenViewController.h"#import "GardenFlower.h"//;#import "Constants.h"#import "GardenNoFlowersView.h"@implementation GardenViewController@synthesize _popup;static unsigned flowerStartX0 = 2;static unsigned flowerStartX1 = 22;static unsigned flowerStartY = 30;static unsigned flowerDiffX = 40;static unsigned flowerDiffY = 50;static unsigned _flowerGrid[9][8] = {{ 0, 0, 0, 0, 0, 0, 0, 0 },{ 0, 0, 0, 0, 0, 0, 0, 0 },{ 0, 0, 0, 0, 0, 0, 0, 0 },{ 0, 0, 0, 0, 0, 0, 0, 0 },{ 0, 0, 0, 0, 0, 0, 0, 0 },{ 0, 0, 0, 0, 0, 0, 0, 0 },{ 0, 0, 0, 0, 0, 0, 0, 0 },{ 0, 0, 0, 0, 0, 0, 0, 0 },{ 0, 0, 0, 0, 0, 0, 0, 0 }};/* // The designated initializer.  Override if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad.- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {    if (self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]) {        // Custom initialization    }    return self;}*/// Implement loadView to create a view hierarchy programmatically, without using a nib.- (void)loadView {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		unsigned i, row, column;		[self initializeView];		NSArray *levels = profileManager._levels;	for (i = 0; i < [levels count]; i++) {		NSDictionary *levelData = levels[i];		if ([levelData[kGameDataFlowerKey] boolValue]) {			if (levelData[kGameDataFlowerRowKey]) {				row = [levelData[kGameDataFlowerRowKey] unsignedIntValue];				column = [levelData[kGameDataFlowerColumnKey] unsignedIntValue];								[self createFlowerForLevel:i atRow:row andColumn:column];			}						_flowersAvailable = YES;		}	}		if (!_flowersAvailable) {		[[NSBundle mainBundle] loadNibNamed:@"GardenNoFlowersView" owner:self options:nil];		[self.view addSubview:_popup];		self._popup = nil;	}		[self initializeViewAnimation];}- (void)didReceiveMemoryWarning {	// Releases the view if it doesn't have a superview.    [super didReceiveMemoryWarning];		// Release any cached data, images, etc that aren't in use.}- (void)viewDidUnload {	// Release any retained subviews of the main view.	// e.g. self.myOutlet = nil;}- (void)touchesEnded:(NSSet*)touches withEvent:(UIEvent*)event {	if (_flowersAvailable) {		[self fadeView];	}}- (void) viewVisible {	ProfileManager *profileManager = [ProfileManager sharedProfileManager];		unsigned i, row, column, maxColumn;	GardenFlower* flower;		[super viewVisible];		NSMutableDictionary *levelData;	BOOL saveLevels = NO;	NSArray *flowers;	for (i = 0; i < [profileManager._levels count]; i++) {		levelData = [[NSMutableDictionary alloc] initWithDictionary:[profileManager getLevelDataForLevel:i]];		if ([levelData[kGameDataFlowerKey] boolValue]) {			if (!levelData[kGameDataFlowerRowKey]) {				row = arc4random() % kMaxFlowerRows;				if (row % 2 == 0) {					column = arc4random() % kMaxFlowerColumns;				} else {					column = arc4random() % (kMaxFlowerColumns - 1);				}								while (_flowerGrid[row][column] == 1) {					if (row % 2 == 0) {						maxColumn = kMaxFlowerColumns;					} else {						maxColumn = kMaxFlowerColumns - 1;					}					column++;					if (column == maxColumn) {						column = 0;						row++;						if (row == kMaxFlowerRows) {							row = 0;						}					}				}								levelData[kGameDataFlowerRowKey] = [NSNumber numberWithInteger:row];				levelData[kGameDataFlowerColumnKey] = [NSNumber numberWithInteger:column];				[profileManager setLevelDataForLevel:i levelData:levelData];				saveLevels = YES;								[self createFlowerForLevel:i atRow:row andColumn:column];				flowers = [self.view subviews];				flower = (GardenFlower*)flowers[[flowers count]-1];								flower.alpha = 0.0;				[UIView beginAnimations:nil context:nil];				[UIView setAnimationDuration:kViewFadeTime];				[UIView setAnimationDelegate:self];				[UIView setAnimationDuration:[flowers count] * 0.2];				flower.alpha = 1.0;				[UIView commitAnimations];							}		}			}		if (saveLevels) {		[profileManager saveLevels];	}}- (void) fadeView {	self.view.userInteractionEnabled = NO;		UIView *mask = [[UIView alloc] initWithFrame:CGRectMake(0,0,self.view.frame.size.width,self.view.frame.size.height)];	mask.backgroundColor = [UIColor blackColor];	mask.alpha = 0.0;	[self.view addSubview:mask];		[UIView beginAnimations:nil context:nil];	[UIView setAnimationDuration:kViewFadeTime];	[UIView setAnimationDelegate:self];	[UIView setAnimationDidStopSelector:@selector(removeView)];	mask.alpha = 1.0;	[UIView commitAnimations];}- (void) removeView {	[[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_CHANGESTATE object:self userInfo:@{kNOTIFICATION_CHANGESTATE: @(kGameState_MainMenu)}];}- (void) createFlowerForLevel:(unsigned)level atRow:(unsigned)row andColumn:(unsigned)column {	unsigned x, y;	GardenFlower *flower;		_flowerGrid[row][column] = 1;		if (row % 2 == 0) {		x = flowerStartX0 + (flowerDiffX * column);	} else {		x = flowerStartX1 + (flowerDiffX * column);	}	y = flowerStartY + (flowerDiffY * row);		flower = [[GardenFlower alloc] initWithFrame:CGRectMake(x,y,kGardenFlowerWidth,kGardenFlowerHeight)];	flower._level = level;		[self.view addSubview:flower];	}- (IBAction) goToMainMenuSelected:(id)sender {	[self fadeView];}@end