#import "MainMenuCell.h"#import "Constants.h"#import "LevelFlowerView.h"#import "PegImageView.h"@implementation MainMenuCell@synthesize _hiliteImageView;//static unsigned startPegX = 30;//static unsigned startPegY = 25;static unsigned diffPeg = 8.5;- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString*)reuseIdentifier {	if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {        self.selectionStyle = UITableViewCellSelectionStyleNone;				UIImageView *backgroundImageView;				if ([reuseIdentifier isEqual: kCellIdentifierInactive]) {			_enabled = NO;			backgroundImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"picker_itemBG_off"]];		} else {			_enabled = YES;			backgroundImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"picker_itemBG_on"]];			_hiliteImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"picker_itemBG_highlight"]];			_hiliteImageView.center = CGPointMake(160,45);			_hiliteImageView.hidden = YES;		}				backgroundImageView.center = CGPointMake(160,45);		[self.contentView addSubview:backgroundImageView];						_levelFlower = [[LevelFlowerView alloc] initWithFrame:CGRectMake(233,10,84,70)];		[self.contentView addSubview:_levelFlower];				_roundLabel = [[UILabel alloc] initWithFrame:CGRectMake(83, 36, 52, 36)];		_roundLabel.backgroundColor = [UIColor clearColor];		_roundLabel.font = [UIFont fontWithName:@"HelveticaNeueLTStd-Hv" size:30.0];		_roundLabel.textAlignment = UITextAlignmentCenter;		[self.contentView addSubview:_roundLabel];				_movesLabel = [[UILabel alloc] initWithFrame:CGRectMake(145, 36, 100, 36)];		_movesLabel.backgroundColor = [UIColor clearColor];		_movesLabel.font = [UIFont fontWithName:@"HelveticaNeueLTStd-Hv" size:30.0];		_movesLabel.textAlignment = UITextAlignmentCenter;		[self.contentView addSubview:_movesLabel];				if (_enabled) {			[self.contentView addSubview:_hiliteImageView];		}				_pegView = [[UIView alloc] initWithFrame:CGRectMake(27.0,22.0,40.0,48.5)];		[self.contentView addSubview:_pegView];    }	    return self;}- (void)setSelected:(BOOL)selected animated:(BOOL)animated {    [super setSelected:selected animated:animated];	_hiliteImageView.hidden = !selected;}- (void) initializeForLevelNum:(unsigned)level withMoves:(unsigned)moves withLeastMoves:(unsigned)leastMoves withLayout:(NSMutableArray*)layout {	unsigned row, column;	NSString *pegType;	NSArray *rowObjects;		PegImageView *peg;	unsigned pegTag;	BOOL newPeg;		UIColor *disabledColor = [UIColor colorWithRed:60/255.0 green:71/255.0 blue:14/255.0 alpha:1.0];	_roundLabel.text = [NSString stringWithFormat:@"%d", level+1];		if (moves == 0) {		_movesLabel.text = @"--";		_levelFlower._showFlower = NO;	} else {		_movesLabel.text = [NSString stringWithFormat:@"%d", moves];		_levelFlower._showFlower = moves <= leastMoves;	}		_levelFlower._showMoves = _enabled;	[_levelFlower setLevel:level withMoves:leastMoves];		if (_enabled) {		_roundLabel.textColor = [UIColor whiteColor];		_movesLabel.textColor = [UIColor whiteColor];				// create pegs		for (row = 0; row < [layout count]; row++) {			rowObjects = layout[row];			for (column = 0; column < [rowObjects count]; column++) {				newPeg = NO;								pegType = rowObjects[column];								pegTag = row * [rowObjects count] + column + 1;				peg = (PegImageView*)[_pegView viewWithTag:pegTag];				if (!peg) {					newPeg = YES;					peg = [[PegImageView alloc] init];					peg.tag = pegTag;				}								[peg setPegType:pegType];				if (newPeg) {					peg.frame = CGRectMake(0 + (diffPeg * column), 0 + (diffPeg * row), peg.frame.size.width, peg.frame.size.height);					[_pegView addSubview:peg];									}			}		}	} else {		_roundLabel.textColor = disabledColor;		_movesLabel.textColor = disabledColor;				// create hole pegs		for (row = 0; row < [layout count]; row++) {			rowObjects = layout[row];			for (column = 0; column < [rowObjects count]; column++) {				newPeg = NO;								pegTag = row * [rowObjects count] + column + 1;				peg = (PegImageView*)[_pegView viewWithTag:pegTag];				if (!peg) {					newPeg = YES;					peg = [[PegImageView alloc] init];					peg.tag = pegTag;				}								[peg setPegType:kGameHole];								if (newPeg) {					peg.frame = CGRectMake(0 + (diffPeg * column), 0 + (diffPeg * row), peg.frame.size.width, peg.frame.size.height);					[_pegView addSubview:peg];									}			}		}	}}@end